// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

namespace ImmutableObjectGraph.Generation.Tests.TestSources
{
    using System;
    using System.Collections.Generic;
    using System.Collections.Immutable;
    using System.Linq;
    using System.Text;
    using System.Threading.Tasks;

    partial class XmlNode : ImmutableObjectGraph.IRecursiveType
    {
        private static int lastIdentityProduced;
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        private readonly uint identity;
        protected XmlNode(uint identity, System.String localName, bool skipValidation)
        {
            this.identity = identity;
            this.localName = localName;
        }

        public string LocalName => this.localName;
        internal protected uint Identity => this.identity;
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        uint ImmutableObjectGraph.IRecursiveType.Identity => this.Identity;
        public virtual ImmutableObjectGraph.Generation.Tests.TestSources.XmlAttribute ToXmlAttribute(ImmutableObjectGraph.Optional<System.String> namespaceName = default (ImmutableObjectGraph.Optional<System.String>), ImmutableObjectGraph.Optional<System.String> value = default (ImmutableObjectGraph.Optional<System.String>))
        {
            var that = this as ImmutableObjectGraph.Generation.Tests.TestSources.XmlAttribute;
            if (that != null && this.GetType().Equals(typeof (ImmutableObjectGraph.Generation.Tests.TestSources.XmlAttribute)))
            {
                if ((!namespaceName.IsDefined || namespaceName.Value == that.NamespaceName) && (!value.IsDefined || value.Value == that.Value))
                    return that;
            }

            return ImmutableObjectGraph.Generation.Tests.TestSources.XmlAttribute.CreateWithIdentity(localName: ImmutableObjectGraph.Optional.For(this.LocalName), identity: this.Identity, namespaceName: namespaceName, value: value);
        }

        public virtual ImmutableObjectGraph.Generation.Tests.TestSources.XmlElement ToXmlElement(ImmutableObjectGraph.Optional<System.String> namespaceName = default (ImmutableObjectGraph.Optional<System.String>), ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<ImmutableObjectGraph.Generation.Tests.TestSources.XmlNode>> children = default (ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<ImmutableObjectGraph.Generation.Tests.TestSources.XmlNode>>))
        {
            var that = this as ImmutableObjectGraph.Generation.Tests.TestSources.XmlElement;
            if (that != null && this.GetType().Equals(typeof (ImmutableObjectGraph.Generation.Tests.TestSources.XmlElement)))
            {
                if ((!namespaceName.IsDefined || namespaceName.Value == that.NamespaceName) && (!children.IsDefined || children.Value == that.Children))
                    return that;
            }

            return ImmutableObjectGraph.Generation.Tests.TestSources.XmlElement.CreateWithIdentity(localName: ImmutableObjectGraph.Optional.For(this.LocalName), identity: this.Identity, namespaceName: namespaceName, children: children);
        }

        public virtual ImmutableObjectGraph.Generation.Tests.TestSources.XmlElementWithContent ToXmlElementWithContent(ImmutableObjectGraph.Optional<System.String> namespaceName = default (ImmutableObjectGraph.Optional<System.String>), ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<ImmutableObjectGraph.Generation.Tests.TestSources.XmlNode>> children = default (ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<ImmutableObjectGraph.Generation.Tests.TestSources.XmlNode>>), ImmutableObjectGraph.Optional<System.String> content = default (ImmutableObjectGraph.Optional<System.String>))
        {
            var that = this as ImmutableObjectGraph.Generation.Tests.TestSources.XmlElementWithContent;
            if (that != null && this.GetType().Equals(typeof (ImmutableObjectGraph.Generation.Tests.TestSources.XmlElementWithContent)))
            {
                if ((!namespaceName.IsDefined || namespaceName.Value == that.NamespaceName) && (!children.IsDefined || children.Value == that.Children) && (!content.IsDefined || content.Value == that.Content))
                    return that;
            }

            return ImmutableObjectGraph.Generation.Tests.TestSources.XmlElementWithContent.CreateWithIdentity(localName: ImmutableObjectGraph.Optional.For(this.LocalName), identity: this.Identity, namespaceName: namespaceName, children: children, content: content);
        }

        public XmlNode With(ImmutableObjectGraph.Optional<System.String> localName = default (ImmutableObjectGraph.Optional<System.String>))
        {
            return (XmlNode)this.WithCore(localName: localName);
        }

        public ImmutableObjectGraph.Generation.Tests.TestSources.XmlNode WithLocalName(System.String value)
        {
            if (value == this.localName)
            {
                return this;
            }

            return this.With(localName: ImmutableObjectGraph.Optional.For(value));
        }

        static protected uint NewIdentity()
        {
            return (uint)System.Threading.Interlocked.Increment(ref lastIdentityProduced);
        }

        protected abstract XmlNode WithCore(ImmutableObjectGraph.Optional<System.String> localName = default (ImmutableObjectGraph.Optional<System.String>));
    }
}

namespace ImmutableObjectGraph.Generation.Tests.TestSources
{
    using System;
    using System.Collections.Generic;
    using System.Collections.Immutable;
    using System.Linq;
    using System.Text;
    using System.Threading.Tasks;

    partial class XmlElement : System.Collections.Generic.IEnumerable<ImmutableObjectGraph.Generation.Tests.TestSources.XmlNode>, ImmutableObjectGraph.IRecursiveParentWithOrderedChildren, ImmutableObjectGraph.IRecursiveParent<ImmutableObjectGraph.Generation.Tests.TestSources.XmlNode>, ImmutableObjectGraph.IRecursiveParentWithChildReplacement<ImmutableObjectGraph.Generation.Tests.TestSources.XmlNode>, ImmutableObjectGraph.IRecursiveParentWithLookupTable<ImmutableObjectGraph.Generation.Tests.TestSources.XmlNode>
    {
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        protected System.Collections.Immutable.ImmutableDictionary<uint, System.Collections.Generic.KeyValuePair<ImmutableObjectGraph.Generation.Tests.TestSources.XmlNode, uint>> lookupTable;
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        private static readonly XmlElement DefaultInstance = GetDefaultTemplate();
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        private readonly uint inefficiencyLoad;
        [System.ObsoleteAttribute("This constructor for use with deserializers only. Use the static Create factory method instead.")]
        public XmlElement(System.String LocalName, System.String NamespaceName, System.Collections.Immutable.ImmutableList<ImmutableObjectGraph.Generation.Tests.TestSources.XmlNode> Children): this (NewIdentity(), localName: LocalName, namespaceName: NamespaceName, children: Children, skipValidation: false, lookupTable: null)
        {
        }

        protected XmlElement(uint identity, System.String localName, System.String namespaceName, System.Collections.Immutable.ImmutableList<ImmutableObjectGraph.Generation.Tests.TestSources.XmlNode> children, bool skipValidation, ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableDictionary<uint, System.Collections.Generic.KeyValuePair<ImmutableObjectGraph.Generation.Tests.TestSources.XmlNode, uint>>> lookupTable): base (identity: identity, localName: localName, skipValidation: skipValidation)
        {
            this.namespaceName = namespaceName;
            this.children = children;
            if (!skipValidation)
            {
                this.Validate();
            }

            var lookupInitResult = ImmutableObjectGraph.RecursiveTypeExtensions.LookupTable<ImmutableObjectGraph.Generation.Tests.TestSources.XmlNode, ImmutableObjectGraph.Generation.Tests.TestSources.XmlElement>.Initialize(this, lookupTable);
            this.inefficiencyLoad = lookupInitResult.InefficiencyLoad;
            this.lookupTable = lookupInitResult.LookupTable;
        }

        public ImmutableList<XmlNode> Children => this.children;
        public string NamespaceName => this.namespaceName;
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        System.Collections.Generic.IReadOnlyCollection<ImmutableObjectGraph.Generation.Tests.TestSources.XmlNode> ImmutableObjectGraph.IRecursiveParent<ImmutableObjectGraph.Generation.Tests.TestSources.XmlNode>.Children => this.Children;
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        System.Collections.Generic.IReadOnlyCollection<ImmutableObjectGraph.IRecursiveType> ImmutableObjectGraph.IRecursiveParent.Children => this.Children;
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        System.Collections.Generic.IReadOnlyList<ImmutableObjectGraph.IRecursiveType> IRecursiveParentWithOrderedChildren.Children => this.children;
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        System.Collections.Generic.IReadOnlyCollection<ImmutableObjectGraph.Generation.Tests.TestSources.XmlNode> ImmutableObjectGraph.IRecursiveParentWithLookupTable<ImmutableObjectGraph.Generation.Tests.TestSources.XmlNode>.Children => this.Children;
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        uint ImmutableObjectGraph.IRecursiveParentWithLookupTable<ImmutableObjectGraph.Generation.Tests.TestSources.XmlNode>.InefficiencyLoad => this.inefficiencyLoad;
        private System.Collections.Immutable.ImmutableDictionary<uint, System.Collections.Generic.KeyValuePair<ImmutableObjectGraph.Generation.Tests.TestSources.XmlNode, uint>> LookupTable
        {
            get
            {
                if (this.lookupTable == ImmutableObjectGraph.RecursiveTypeExtensions.LookupTable<ImmutableObjectGraph.Generation.Tests.TestSources.XmlNode, ImmutableObjectGraph.Generation.Tests.TestSources.XmlElement>.LazySentinel)
                {
                    this.lookupTable = ImmutableObjectGraph.RecursiveTypeExtensions.LookupTable<ImmutableObjectGraph.Generation.Tests.TestSources.XmlNode, ImmutableObjectGraph.Generation.Tests.TestSources.XmlElement>.CreateLookupTable(this);
                }

                return this.lookupTable;
            }
        }

        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        System.Collections.Immutable.ImmutableDictionary<uint, System.Collections.Generic.KeyValuePair<ImmutableObjectGraph.Generation.Tests.TestSources.XmlNode, uint>> ImmutableObjectGraph.IRecursiveParentWithLookupTable<ImmutableObjectGraph.Generation.Tests.TestSources.XmlNode>.LookupTable => this.LookupTable;
        public static XmlElement Create(ImmutableObjectGraph.Optional<System.String> localName = default (ImmutableObjectGraph.Optional<System.String>), ImmutableObjectGraph.Optional<System.String> namespaceName = default (ImmutableObjectGraph.Optional<System.String>), ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<ImmutableObjectGraph.Generation.Tests.TestSources.XmlNode>> children = default (ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<ImmutableObjectGraph.Generation.Tests.TestSources.XmlNode>>))
        {
            var identity = ImmutableObjectGraph.Optional.For(NewIdentity());
            return DefaultInstance.WithFactory(localName: ImmutableObjectGraph.Optional.For(localName.GetValueOrDefault(DefaultInstance.LocalName)), namespaceName: ImmutableObjectGraph.Optional.For(namespaceName.GetValueOrDefault(DefaultInstance.NamespaceName)), children: ImmutableObjectGraph.Optional.For(children.GetValueOrDefault(DefaultInstance.Children)), identity: identity);
        }

        public ImmutableObjectGraph.Generation.Tests.TestSources.XmlElement AddChild(ImmutableObjectGraph.Generation.Tests.TestSources.XmlNode value)
        {
            return this.With(children: this.children.Add(value));
        }

        public ImmutableObjectGraph.Generation.Tests.TestSources.XmlElement AddChildren(System.Collections.Generic.IEnumerable<ImmutableObjectGraph.Generation.Tests.TestSources.XmlNode> values)
        {
            return this.With(children: this.children.AddRange(values));
        }

        public ImmutableObjectGraph.Generation.Tests.TestSources.XmlElement AddChildren(params ImmutableObjectGraph.Generation.Tests.TestSources.XmlNode[] values)
        {
            return this.With(children: this.children.AddRange(values));
        }

        public ImmutableObjectGraph.Generation.Tests.TestSources.XmlElement AddDescendent(ImmutableObjectGraph.Generation.Tests.TestSources.XmlNode value, ImmutableObjectGraph.Generation.Tests.TestSources.XmlElement parent)
        {
            var spine = this.GetSpine(parent);
            var newParent = parent.With(children: parent.Children.Add(value));
            var newSpine = System.Collections.Immutable.ImmutableStack.Create(value, newParent);
            return (ImmutableObjectGraph.Generation.Tests.TestSources.XmlElement)ImmutableObjectGraph.RecursiveTypeExtensions.ReplaceDescendent(this, spine, newSpine, spineIncludesDeletedElement: false).Peek();
        }

        public ImmutableObjectGraph.Generation.Tests.TestSources.XmlNode Find(uint identity)
        {
            return this.Find<ImmutableObjectGraph.Generation.Tests.TestSources.XmlElement, ImmutableObjectGraph.Generation.Tests.TestSources.XmlNode>(identity);
        }

        public System.Collections.Generic.IEnumerator<ImmutableObjectGraph.Generation.Tests.TestSources.XmlNode> GetEnumerator()
        {
            return ((System.Collections.Generic.IEnumerable<ImmutableObjectGraph.Generation.Tests.TestSources.XmlNode>)this.children).GetEnumerator();
        }

        public ImmutableObjectGraph.Generation.Tests.TestSources.XmlElement GetParent(ImmutableObjectGraph.Generation.Tests.TestSources.XmlNode descendent)
        {
            return this.GetParent<ImmutableObjectGraph.Generation.Tests.TestSources.XmlElement, ImmutableObjectGraph.Generation.Tests.TestSources.XmlNode>(descendent);
        }

        public ParentedRecursiveType<ImmutableObjectGraph.Generation.Tests.TestSources.XmlElement, ImmutableObjectGraph.Generation.Tests.TestSources.XmlNode> GetParentedNode(uint identity)
        {
            return this.GetParentedNode<ImmutableObjectGraph.Generation.Tests.TestSources.XmlElement, ImmutableObjectGraph.Generation.Tests.TestSources.XmlNode>(identity);
        }

        public System.Collections.Immutable.ImmutableStack<ImmutableObjectGraph.Generation.Tests.TestSources.XmlNode> GetSpine(uint identity)
        {
            return this.GetSpine<ImmutableObjectGraph.Generation.Tests.TestSources.XmlElement, ImmutableObjectGraph.Generation.Tests.TestSources.XmlNode>(identity);
        }

        public System.Collections.Immutable.ImmutableStack<ImmutableObjectGraph.Generation.Tests.TestSources.XmlNode> GetSpine(ImmutableObjectGraph.Generation.Tests.TestSources.XmlNode descendent)
        {
            return this.GetSpine<ImmutableObjectGraph.Generation.Tests.TestSources.XmlElement, ImmutableObjectGraph.Generation.Tests.TestSources.XmlNode>(descendent);
        }

        public ImmutableObjectGraph.Generation.Tests.TestSources.XmlElement RemoveChild(ImmutableObjectGraph.Generation.Tests.TestSources.XmlNode value)
        {
            return this.With(children: this.children.Remove(this.SyncImmediateChildToCurrentVersion(value)));
        }

        public ImmutableObjectGraph.Generation.Tests.TestSources.XmlElement RemoveChildren()
        {
            return this.With(children: this.children.Clear());
        }

        public ImmutableObjectGraph.Generation.Tests.TestSources.XmlElement RemoveChildren(System.Collections.Generic.IEnumerable<ImmutableObjectGraph.Generation.Tests.TestSources.XmlNode> values)
        {
            return this.With(children: this.children.RemoveRange(System.Linq.Enumerable.Select(values, this.SyncImmediateChildToCurrentVersion)));
        }

        public ImmutableObjectGraph.Generation.Tests.TestSources.XmlElement RemoveChildren(params ImmutableObjectGraph.Generation.Tests.TestSources.XmlNode[] values)
        {
            return this.With(children: this.children.RemoveRange(System.Linq.Enumerable.Select(values, this.SyncImmediateChildToCurrentVersion)));
        }

        public ImmutableObjectGraph.Generation.Tests.TestSources.XmlElement RemoveDescendent(ImmutableObjectGraph.Generation.Tests.TestSources.XmlNode value)
        {
            var spine = this.GetSpine(value);
            var spineList = System.Linq.Enumerable.ToList(spine);
            var parent = (ImmutableObjectGraph.Generation.Tests.TestSources.XmlElement)spineList[spineList.Count - 2];
            var newParent = parent.With(children: parent.Children.Remove(spineList[spineList.Count - 1]));
            var newSpine = System.Collections.Immutable.ImmutableStack.Create<ImmutableObjectGraph.Generation.Tests.TestSources.XmlNode>(newParent);
            return (ImmutableObjectGraph.Generation.Tests.TestSources.XmlElement)this.ReplaceDescendent(spine, newSpine, spineIncludesDeletedElement: true).Peek();
        }

        public ImmutableObjectGraph.Generation.Tests.TestSources.XmlElement ReplaceDescendent(ImmutableObjectGraph.Generation.Tests.TestSources.XmlNode current, ImmutableObjectGraph.Generation.Tests.TestSources.XmlNode replacement)
        {
            var spine = this.GetSpine(current);
            if (spine.IsEmpty)
            {
                throw new System.ArgumentException("Old value not found.");
            }

            return (ImmutableObjectGraph.Generation.Tests.TestSources.XmlElement)this.ReplaceDescendent(spine, System.Collections.Immutable.ImmutableStack.Create(replacement), spineIncludesDeletedElement: false).Peek();
        }

        public ImmutableObjectGraph.Generation.Tests.TestSources.XmlElement ReplaceDescendent(ImmutableObjectGraph.Generation.Tests.TestSources.XmlNode updatedNode)
        {
            var spine = this.GetSpine(updatedNode.Identity);
            if (spine.IsEmpty)
            {
                throw new System.ArgumentException("Old value not found.");
            }

            return (ImmutableObjectGraph.Generation.Tests.TestSources.XmlElement)this.ReplaceDescendent(spine, System.Collections.Immutable.ImmutableStack.Create(updatedNode), spineIncludesDeletedElement: false).Peek();
        }

        public virtual ImmutableObjectGraph.Generation.Tests.TestSources.XmlElementWithContent ToXmlElementWithContent(ImmutableObjectGraph.Optional<System.String> content = default (ImmutableObjectGraph.Optional<System.String>))
        {
            var that = this as ImmutableObjectGraph.Generation.Tests.TestSources.XmlElementWithContent;
            if (that != null && this.GetType().Equals(typeof (ImmutableObjectGraph.Generation.Tests.TestSources.XmlElementWithContent)))
            {
                if ((!content.IsDefined || content.Value == that.Content))
                    return that;
            }

            return ImmutableObjectGraph.Generation.Tests.TestSources.XmlElementWithContent.CreateWithIdentity(localName: ImmutableObjectGraph.Optional.For(this.LocalName), namespaceName: ImmutableObjectGraph.Optional.For(this.NamespaceName), children: ImmutableObjectGraph.Optional.For(this.Children), identity: this.Identity, content: content);
        }

        public override ImmutableObjectGraph.Generation.Tests.TestSources.XmlElementWithContent ToXmlElementWithContent(ImmutableObjectGraph.Optional<System.String> namespaceName = default (ImmutableObjectGraph.Optional<System.String>), ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<ImmutableObjectGraph.Generation.Tests.TestSources.XmlNode>> children = default (ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<ImmutableObjectGraph.Generation.Tests.TestSources.XmlNode>>), ImmutableObjectGraph.Optional<System.String> content = default (ImmutableObjectGraph.Optional<System.String>))
        {
            return base.ToXmlElementWithContent(namespaceName: ImmutableObjectGraph.Optional.For(namespaceName.GetValueOrDefault(this.NamespaceName)), children: ImmutableObjectGraph.Optional.For(children.GetValueOrDefault(this.Children)), content: content);
        }

        public XmlElement With(ImmutableObjectGraph.Optional<System.String> localName = default (ImmutableObjectGraph.Optional<System.String>), ImmutableObjectGraph.Optional<System.String> namespaceName = default (ImmutableObjectGraph.Optional<System.String>), ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<ImmutableObjectGraph.Generation.Tests.TestSources.XmlNode>> children = default (ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<ImmutableObjectGraph.Generation.Tests.TestSources.XmlNode>>))
        {
            return (XmlElement)this.WithCore(localName: localName, namespaceName: namespaceName, children: children);
        }

        public ImmutableObjectGraph.Generation.Tests.TestSources.XmlElement WithChildren(params ImmutableObjectGraph.Generation.Tests.TestSources.XmlNode[] values)
        {
            return this.With(children: this.children.ResetContents(values));
        }

        public ImmutableObjectGraph.Generation.Tests.TestSources.XmlElement WithChildren(System.Collections.Immutable.ImmutableList<ImmutableObjectGraph.Generation.Tests.TestSources.XmlNode> value)
        {
            if (value == this.children)
            {
                return this;
            }

            return this.With(children: ImmutableObjectGraph.Optional.For(value));
        }

        public ImmutableObjectGraph.Generation.Tests.TestSources.XmlElement WithChildren(System.Collections.Generic.IEnumerable<ImmutableObjectGraph.Generation.Tests.TestSources.XmlNode> values)
        {
            return this.With(children: this.children.ResetContents(values));
        }

        new public ImmutableObjectGraph.Generation.Tests.TestSources.XmlElement WithLocalName(System.String value)
        {
            return (ImmutableObjectGraph.Generation.Tests.TestSources.XmlElement)base.WithLocalName(value);
        }

        public ImmutableObjectGraph.Generation.Tests.TestSources.XmlElement WithNamespaceName(System.String value)
        {
            if (value == this.namespaceName)
            {
                return this;
            }

            return this.With(namespaceName: ImmutableObjectGraph.Optional.For(value));
        }

        internal static XmlElement CreateWithIdentity(ImmutableObjectGraph.Optional<System.String> localName = default (ImmutableObjectGraph.Optional<System.String>), ImmutableObjectGraph.Optional<System.String> namespaceName = default (ImmutableObjectGraph.Optional<System.String>), ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<ImmutableObjectGraph.Generation.Tests.TestSources.XmlNode>> children = default (ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<ImmutableObjectGraph.Generation.Tests.TestSources.XmlNode>>), ImmutableObjectGraph.Optional<uint> identity = default (ImmutableObjectGraph.Optional<uint>))
        {
            if (!identity.IsDefined)
                identity = NewIdentity();
            return DefaultInstance.WithFactory(localName: ImmutableObjectGraph.Optional.For(localName.GetValueOrDefault(DefaultInstance.LocalName)), namespaceName: ImmutableObjectGraph.Optional.For(namespaceName.GetValueOrDefault(DefaultInstance.NamespaceName)), children: ImmutableObjectGraph.Optional.For(children.GetValueOrDefault(DefaultInstance.Children)), identity: identity);
        }

        protected ImmutableObjectGraph.Generation.Tests.TestSources.XmlNode SyncImmediateChildToCurrentVersion(ImmutableObjectGraph.Generation.Tests.TestSources.XmlNode child)
        {
            ImmutableObjectGraph.Generation.Tests.TestSources.XmlNode currentValue;
            if (!this.TryFindImmediateChild(child.Identity, out currentValue))
            {
                throw new System.ArgumentException();
            }

            return currentValue;
        }

        protected override XmlNode WithCore(ImmutableObjectGraph.Optional<System.String> localName = default (ImmutableObjectGraph.Optional<System.String>))
        {
            return this.WithFactory(localName: localName);
        }

        protected virtual XmlElement WithCore(ImmutableObjectGraph.Optional<System.String> localName = default (ImmutableObjectGraph.Optional<System.String>), ImmutableObjectGraph.Optional<System.String> namespaceName = default (ImmutableObjectGraph.Optional<System.String>), ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<ImmutableObjectGraph.Generation.Tests.TestSources.XmlNode>> children = default (ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<ImmutableObjectGraph.Generation.Tests.TestSources.XmlNode>>))
        {
            return this.WithFactory(localName: localName, namespaceName: namespaceName, children: children, identity: ImmutableObjectGraph.Optional.For(this.Identity));
        }

        static partial void CreateDefaultTemplate(ref Template template);
        private static XmlElement GetDefaultTemplate()
        {
            var template = new Template();
            CreateDefaultTemplate(ref template);
            return new XmlElement(default (uint), template.LocalName, template.NamespaceName, template.Children, skipValidation: true, lookupTable: null);
        }

        System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator()
        {
            return ((System.Collections.Generic.IEnumerable<ImmutableObjectGraph.Generation.Tests.TestSources.XmlNode>)this.children).GetEnumerator();
        }

        ImmutableObjectGraph.ParentedRecursiveType<ImmutableObjectGraph.IRecursiveParent<ImmutableObjectGraph.IRecursiveType>, ImmutableObjectGraph.IRecursiveType> ImmutableObjectGraph.IRecursiveParent.GetParentedNode(uint identity)
        {
            var parented = this.GetParentedNode(identity);
            return new ImmutableObjectGraph.ParentedRecursiveType<ImmutableObjectGraph.IRecursiveParent<ImmutableObjectGraph.IRecursiveType>, ImmutableObjectGraph.IRecursiveType>(parented.Value, parented.Parent);
        }

        int IRecursiveParentWithOrderedChildren.IndexOf(ImmutableObjectGraph.IRecursiveType value)
        {
            return this.Children.IndexOf((ImmutableObjectGraph.Generation.Tests.TestSources.XmlNode)value);
        }

        ImmutableObjectGraph.IRecursiveParent<ImmutableObjectGraph.Generation.Tests.TestSources.XmlNode> ImmutableObjectGraph.IRecursiveParentWithChildReplacement<ImmutableObjectGraph.Generation.Tests.TestSources.XmlNode>.ReplaceChild(System.Collections.Immutable.ImmutableStack<ImmutableObjectGraph.Generation.Tests.TestSources.XmlNode> oldSpine, System.Collections.Immutable.ImmutableStack<ImmutableObjectGraph.Generation.Tests.TestSources.XmlNode> newSpine)
        {
            var newChildren = this.Children.Replace(oldSpine.Peek(), newSpine.Peek());
            var newSelf = this.With(children: newChildren);
            var lookupTableLazySentinel = ImmutableObjectGraph.RecursiveTypeExtensions.LookupTable<ImmutableObjectGraph.Generation.Tests.TestSources.XmlNode, ImmutableObjectGraph.Generation.Tests.TestSources.XmlElement>.LazySentinel;
            if (newSelf.lookupTable == lookupTableLazySentinel && this.lookupTable != null && this.lookupTable != lookupTableLazySentinel)
            {
                newSelf.lookupTable = ImmutableObjectGraph.RecursiveTypeExtensions.LookupTable<ImmutableObjectGraph.Generation.Tests.TestSources.XmlNode, ImmutableObjectGraph.Generation.Tests.TestSources.XmlElement>.Fixup(this, ImmutableObjectGraph.ImmutableDeque.Create(newSpine), ImmutableObjectGraph.ImmutableDeque.Create(oldSpine));
                ImmutableObjectGraph.RecursiveTypeExtensions.LookupTable<ImmutableObjectGraph.Generation.Tests.TestSources.XmlNode, ImmutableObjectGraph.Generation.Tests.TestSources.XmlElement>.ValidateInternalIntegrityDebugOnly(newSelf);
            }

            return newSelf;
        }

        partial void Validate();
        private XmlElement WithFactory(ImmutableObjectGraph.Optional<System.String> localName = default (ImmutableObjectGraph.Optional<System.String>), ImmutableObjectGraph.Optional<System.String> namespaceName = default (ImmutableObjectGraph.Optional<System.String>), ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<ImmutableObjectGraph.Generation.Tests.TestSources.XmlNode>> children = default (ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<ImmutableObjectGraph.Generation.Tests.TestSources.XmlNode>>), ImmutableObjectGraph.Optional<uint> identity = default (ImmutableObjectGraph.Optional<uint>))
        {
            if ((identity.IsDefined && identity.Value != this.Identity) || (localName.IsDefined && localName.Value != this.LocalName) || (namespaceName.IsDefined && namespaceName.Value != this.NamespaceName) || (children.IsDefined && children.Value != this.Children))
            {
                return new XmlElement(identity: identity.GetValueOrDefault(this.Identity), localName: localName.GetValueOrDefault(this.LocalName), namespaceName: namespaceName.GetValueOrDefault(this.NamespaceName), children: children.GetValueOrDefault(this.Children), skipValidation: false, lookupTable: (children.IsDefined && children.Value != this.Children) ? default (ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableDictionary<uint, System.Collections.Generic.KeyValuePair<ImmutableObjectGraph.Generation.Tests.TestSources.XmlNode, uint>>>) : ImmutableObjectGraph.Optional.For(this.lookupTable));
            }
            else
            {
                return this;
            }
        }

#pragma warning disable 649 // field initialization is optional in user code

        private struct Template
        {
            internal System.Collections.Immutable.ImmutableList<ImmutableObjectGraph.Generation.Tests.TestSources.XmlNode> Children;
            internal System.String LocalName;
            internal System.String NamespaceName;
        }
#pragma warning restore 649
    }
}

namespace ImmutableObjectGraph.Generation.Tests.TestSources
{
    using System;
    using System.Collections.Generic;
    using System.Collections.Immutable;
    using System.Linq;
    using System.Text;
    using System.Threading.Tasks;

    partial class XmlElementWithContent
    {
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        private static readonly XmlElementWithContent DefaultInstance = GetDefaultTemplate();
        [System.ObsoleteAttribute("This constructor for use with deserializers only. Use the static Create factory method instead.")]
        public XmlElementWithContent(System.String LocalName, System.String NamespaceName, System.Collections.Immutable.ImmutableList<ImmutableObjectGraph.Generation.Tests.TestSources.XmlNode> Children, System.String Content): this (NewIdentity(), localName: LocalName, namespaceName: NamespaceName, children: Children, content: Content, skipValidation: false, lookupTable: null)
        {
        }

        protected XmlElementWithContent(uint identity, System.String localName, System.String namespaceName, System.Collections.Immutable.ImmutableList<ImmutableObjectGraph.Generation.Tests.TestSources.XmlNode> children, System.String content, bool skipValidation, ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableDictionary<uint, System.Collections.Generic.KeyValuePair<ImmutableObjectGraph.Generation.Tests.TestSources.XmlNode, uint>>> lookupTable): base (identity: identity, localName: localName, namespaceName: namespaceName, children: children, skipValidation: skipValidation, lookupTable: lookupTable)
        {
            this.content = content;
            if (!skipValidation)
            {
                this.Validate();
            }
        }

        public string Content => this.content;
        public static XmlElementWithContent Create(ImmutableObjectGraph.Optional<System.String> localName = default (ImmutableObjectGraph.Optional<System.String>), ImmutableObjectGraph.Optional<System.String> namespaceName = default (ImmutableObjectGraph.Optional<System.String>), ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<ImmutableObjectGraph.Generation.Tests.TestSources.XmlNode>> children = default (ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<ImmutableObjectGraph.Generation.Tests.TestSources.XmlNode>>), ImmutableObjectGraph.Optional<System.String> content = default (ImmutableObjectGraph.Optional<System.String>))
        {
            var identity = ImmutableObjectGraph.Optional.For(NewIdentity());
            return DefaultInstance.WithFactory(localName: ImmutableObjectGraph.Optional.For(localName.GetValueOrDefault(DefaultInstance.LocalName)), namespaceName: ImmutableObjectGraph.Optional.For(namespaceName.GetValueOrDefault(DefaultInstance.NamespaceName)), children: ImmutableObjectGraph.Optional.For(children.GetValueOrDefault(DefaultInstance.Children)), content: ImmutableObjectGraph.Optional.For(content.GetValueOrDefault(DefaultInstance.Content)), identity: identity);
        }

        new public ImmutableObjectGraph.Generation.Tests.TestSources.XmlElementWithContent AddChild(ImmutableObjectGraph.Generation.Tests.TestSources.XmlNode value)
        {
            return (ImmutableObjectGraph.Generation.Tests.TestSources.XmlElementWithContent)base.AddChild(value);
        }

        new public ImmutableObjectGraph.Generation.Tests.TestSources.XmlElementWithContent AddChildren(System.Collections.Generic.IEnumerable<ImmutableObjectGraph.Generation.Tests.TestSources.XmlNode> values)
        {
            return (ImmutableObjectGraph.Generation.Tests.TestSources.XmlElementWithContent)base.AddChildren(values);
        }

        new public ImmutableObjectGraph.Generation.Tests.TestSources.XmlElementWithContent AddChildren(params ImmutableObjectGraph.Generation.Tests.TestSources.XmlNode[] values)
        {
            return (ImmutableObjectGraph.Generation.Tests.TestSources.XmlElementWithContent)base.AddChildren(values);
        }

        new public ImmutableObjectGraph.Generation.Tests.TestSources.XmlElementWithContent RemoveChild(ImmutableObjectGraph.Generation.Tests.TestSources.XmlNode value)
        {
            return (ImmutableObjectGraph.Generation.Tests.TestSources.XmlElementWithContent)base.RemoveChild(value);
        }

        new public ImmutableObjectGraph.Generation.Tests.TestSources.XmlElementWithContent RemoveChildren()
        {
            return (ImmutableObjectGraph.Generation.Tests.TestSources.XmlElementWithContent)base.RemoveChildren();
        }

        new public ImmutableObjectGraph.Generation.Tests.TestSources.XmlElementWithContent RemoveChildren(System.Collections.Generic.IEnumerable<ImmutableObjectGraph.Generation.Tests.TestSources.XmlNode> values)
        {
            return (ImmutableObjectGraph.Generation.Tests.TestSources.XmlElementWithContent)base.RemoveChildren(values);
        }

        new public ImmutableObjectGraph.Generation.Tests.TestSources.XmlElementWithContent RemoveChildren(params ImmutableObjectGraph.Generation.Tests.TestSources.XmlNode[] values)
        {
            return (ImmutableObjectGraph.Generation.Tests.TestSources.XmlElementWithContent)base.RemoveChildren(values);
        }

        public ImmutableObjectGraph.Generation.Tests.TestSources.XmlElement ToXmlElement()
        {
            return ImmutableObjectGraph.Generation.Tests.TestSources.XmlElement.CreateWithIdentity(localName: ImmutableObjectGraph.Optional.For(this.LocalName), namespaceName: ImmutableObjectGraph.Optional.For(this.NamespaceName), children: ImmutableObjectGraph.Optional.For(this.Children), identity: this.Identity);
        }

        public XmlElementWithContent With(ImmutableObjectGraph.Optional<System.String> localName = default (ImmutableObjectGraph.Optional<System.String>), ImmutableObjectGraph.Optional<System.String> namespaceName = default (ImmutableObjectGraph.Optional<System.String>), ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<ImmutableObjectGraph.Generation.Tests.TestSources.XmlNode>> children = default (ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<ImmutableObjectGraph.Generation.Tests.TestSources.XmlNode>>), ImmutableObjectGraph.Optional<System.String> content = default (ImmutableObjectGraph.Optional<System.String>))
        {
            return (XmlElementWithContent)this.WithCore(localName: localName, namespaceName: namespaceName, children: children, content: content);
        }

        new public ImmutableObjectGraph.Generation.Tests.TestSources.XmlElementWithContent WithChildren(params ImmutableObjectGraph.Generation.Tests.TestSources.XmlNode[] values)
        {
            return (ImmutableObjectGraph.Generation.Tests.TestSources.XmlElementWithContent)base.WithChildren(values);
        }

        new public ImmutableObjectGraph.Generation.Tests.TestSources.XmlElementWithContent WithChildren(System.Collections.Generic.IEnumerable<ImmutableObjectGraph.Generation.Tests.TestSources.XmlNode> values)
        {
            return (ImmutableObjectGraph.Generation.Tests.TestSources.XmlElementWithContent)base.WithChildren(values);
        }

        new public ImmutableObjectGraph.Generation.Tests.TestSources.XmlElementWithContent WithChildren(System.Collections.Immutable.ImmutableList<ImmutableObjectGraph.Generation.Tests.TestSources.XmlNode> value)
        {
            return (ImmutableObjectGraph.Generation.Tests.TestSources.XmlElementWithContent)base.WithChildren(value);
        }

        public ImmutableObjectGraph.Generation.Tests.TestSources.XmlElementWithContent WithContent(System.String value)
        {
            if (value == this.content)
            {
                return this;
            }

            return this.With(content: ImmutableObjectGraph.Optional.For(value));
        }

        new public ImmutableObjectGraph.Generation.Tests.TestSources.XmlElementWithContent WithLocalName(System.String value)
        {
            return (ImmutableObjectGraph.Generation.Tests.TestSources.XmlElementWithContent)base.WithLocalName(value);
        }

        new public ImmutableObjectGraph.Generation.Tests.TestSources.XmlElementWithContent WithNamespaceName(System.String value)
        {
            return (ImmutableObjectGraph.Generation.Tests.TestSources.XmlElementWithContent)base.WithNamespaceName(value);
        }

        internal static XmlElementWithContent CreateWithIdentity(ImmutableObjectGraph.Optional<System.String> localName = default (ImmutableObjectGraph.Optional<System.String>), ImmutableObjectGraph.Optional<System.String> namespaceName = default (ImmutableObjectGraph.Optional<System.String>), ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<ImmutableObjectGraph.Generation.Tests.TestSources.XmlNode>> children = default (ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<ImmutableObjectGraph.Generation.Tests.TestSources.XmlNode>>), ImmutableObjectGraph.Optional<System.String> content = default (ImmutableObjectGraph.Optional<System.String>), ImmutableObjectGraph.Optional<uint> identity = default (ImmutableObjectGraph.Optional<uint>))
        {
            if (!identity.IsDefined)
                identity = NewIdentity();
            return DefaultInstance.WithFactory(localName: ImmutableObjectGraph.Optional.For(localName.GetValueOrDefault(DefaultInstance.LocalName)), namespaceName: ImmutableObjectGraph.Optional.For(namespaceName.GetValueOrDefault(DefaultInstance.NamespaceName)), children: ImmutableObjectGraph.Optional.For(children.GetValueOrDefault(DefaultInstance.Children)), content: ImmutableObjectGraph.Optional.For(content.GetValueOrDefault(DefaultInstance.Content)), identity: identity);
        }

        protected override XmlNode WithCore(ImmutableObjectGraph.Optional<System.String> localName = default (ImmutableObjectGraph.Optional<System.String>))
        {
            return this.WithFactory(localName: localName);
        }

        protected override XmlElement WithCore(ImmutableObjectGraph.Optional<System.String> localName = default (ImmutableObjectGraph.Optional<System.String>), ImmutableObjectGraph.Optional<System.String> namespaceName = default (ImmutableObjectGraph.Optional<System.String>), ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<ImmutableObjectGraph.Generation.Tests.TestSources.XmlNode>> children = default (ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<ImmutableObjectGraph.Generation.Tests.TestSources.XmlNode>>))
        {
            return this.WithFactory(localName: localName, namespaceName: namespaceName, children: children);
        }

        protected virtual XmlElementWithContent WithCore(ImmutableObjectGraph.Optional<System.String> localName = default (ImmutableObjectGraph.Optional<System.String>), ImmutableObjectGraph.Optional<System.String> namespaceName = default (ImmutableObjectGraph.Optional<System.String>), ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<ImmutableObjectGraph.Generation.Tests.TestSources.XmlNode>> children = default (ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<ImmutableObjectGraph.Generation.Tests.TestSources.XmlNode>>), ImmutableObjectGraph.Optional<System.String> content = default (ImmutableObjectGraph.Optional<System.String>))
        {
            return this.WithFactory(localName: localName, namespaceName: namespaceName, children: children, content: content, identity: ImmutableObjectGraph.Optional.For(this.Identity));
        }

        static partial void CreateDefaultTemplate(ref Template template);
        private static XmlElementWithContent GetDefaultTemplate()
        {
            var template = new Template();
            CreateDefaultTemplate(ref template);
            return new XmlElementWithContent(default (uint), template.LocalName, template.NamespaceName, template.Children, template.Content, skipValidation: true, lookupTable: null);
        }

        partial void Validate();
        private XmlElementWithContent WithFactory(ImmutableObjectGraph.Optional<System.String> localName = default (ImmutableObjectGraph.Optional<System.String>), ImmutableObjectGraph.Optional<System.String> namespaceName = default (ImmutableObjectGraph.Optional<System.String>), ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<ImmutableObjectGraph.Generation.Tests.TestSources.XmlNode>> children = default (ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<ImmutableObjectGraph.Generation.Tests.TestSources.XmlNode>>), ImmutableObjectGraph.Optional<System.String> content = default (ImmutableObjectGraph.Optional<System.String>), ImmutableObjectGraph.Optional<uint> identity = default (ImmutableObjectGraph.Optional<uint>))
        {
            if ((identity.IsDefined && identity.Value != this.Identity) || (localName.IsDefined && localName.Value != this.LocalName) || (namespaceName.IsDefined && namespaceName.Value != this.NamespaceName) || (children.IsDefined && children.Value != this.Children) || (content.IsDefined && content.Value != this.Content))
            {
                return new XmlElementWithContent(identity: identity.GetValueOrDefault(this.Identity), localName: localName.GetValueOrDefault(this.LocalName), namespaceName: namespaceName.GetValueOrDefault(this.NamespaceName), children: children.GetValueOrDefault(this.Children), content: content.GetValueOrDefault(this.Content), skipValidation: false, lookupTable: (children.IsDefined && children.Value != this.Children) ? default (ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableDictionary<uint, System.Collections.Generic.KeyValuePair<ImmutableObjectGraph.Generation.Tests.TestSources.XmlNode, uint>>>) : ImmutableObjectGraph.Optional.For(this.lookupTable));
            }
            else
            {
                return this;
            }
        }

#pragma warning disable 649 // field initialization is optional in user code

        private struct Template
        {
            internal System.Collections.Immutable.ImmutableList<ImmutableObjectGraph.Generation.Tests.TestSources.XmlNode> Children;
            internal System.String Content;
            internal System.String LocalName;
            internal System.String NamespaceName;
        }
#pragma warning restore 649
    }
}

namespace ImmutableObjectGraph.Generation.Tests.TestSources
{
    using System;
    using System.Collections.Generic;
    using System.Collections.Immutable;
    using System.Linq;
    using System.Text;
    using System.Threading.Tasks;

    partial class XmlAttribute
    {
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        private static readonly XmlAttribute DefaultInstance = GetDefaultTemplate();
        [System.ObsoleteAttribute("This constructor for use with deserializers only. Use the static Create factory method instead.")]
        public XmlAttribute(System.String LocalName, System.String NamespaceName, System.String Value): this (NewIdentity(), localName: LocalName, namespaceName: NamespaceName, value: Value, skipValidation: false)
        {
        }

        protected XmlAttribute(uint identity, System.String localName, System.String namespaceName, System.String value, bool skipValidation): base (identity: identity, localName: localName, skipValidation: skipValidation)
        {
            this.namespaceName = namespaceName;
            this.value = value;
            if (!skipValidation)
            {
                this.Validate();
            }
        }

        public string NamespaceName => this.namespaceName;
        public string Value => this.value;
        public static XmlAttribute Create(ImmutableObjectGraph.Optional<System.String> localName = default (ImmutableObjectGraph.Optional<System.String>), ImmutableObjectGraph.Optional<System.String> namespaceName = default (ImmutableObjectGraph.Optional<System.String>), ImmutableObjectGraph.Optional<System.String> value = default (ImmutableObjectGraph.Optional<System.String>))
        {
            var identity = ImmutableObjectGraph.Optional.For(NewIdentity());
            return DefaultInstance.WithFactory(localName: ImmutableObjectGraph.Optional.For(localName.GetValueOrDefault(DefaultInstance.LocalName)), namespaceName: ImmutableObjectGraph.Optional.For(namespaceName.GetValueOrDefault(DefaultInstance.NamespaceName)), value: ImmutableObjectGraph.Optional.For(value.GetValueOrDefault(DefaultInstance.Value)), identity: identity);
        }

        public XmlAttribute With(ImmutableObjectGraph.Optional<System.String> localName = default (ImmutableObjectGraph.Optional<System.String>), ImmutableObjectGraph.Optional<System.String> namespaceName = default (ImmutableObjectGraph.Optional<System.String>), ImmutableObjectGraph.Optional<System.String> value = default (ImmutableObjectGraph.Optional<System.String>))
        {
            return (XmlAttribute)this.WithCore(localName: localName, namespaceName: namespaceName, value: value);
        }

        new public ImmutableObjectGraph.Generation.Tests.TestSources.XmlAttribute WithLocalName(System.String value)
        {
            return (ImmutableObjectGraph.Generation.Tests.TestSources.XmlAttribute)base.WithLocalName(value);
        }

        public ImmutableObjectGraph.Generation.Tests.TestSources.XmlAttribute WithNamespaceName(System.String value)
        {
            if (value == this.namespaceName)
            {
                return this;
            }

            return this.With(namespaceName: ImmutableObjectGraph.Optional.For(value));
        }

        public ImmutableObjectGraph.Generation.Tests.TestSources.XmlAttribute WithValue(System.String value)
        {
            if (value == this.value)
            {
                return this;
            }

            return this.With(value: ImmutableObjectGraph.Optional.For(value));
        }

        internal static XmlAttribute CreateWithIdentity(ImmutableObjectGraph.Optional<System.String> localName = default (ImmutableObjectGraph.Optional<System.String>), ImmutableObjectGraph.Optional<System.String> namespaceName = default (ImmutableObjectGraph.Optional<System.String>), ImmutableObjectGraph.Optional<System.String> value = default (ImmutableObjectGraph.Optional<System.String>), ImmutableObjectGraph.Optional<uint> identity = default (ImmutableObjectGraph.Optional<uint>))
        {
            if (!identity.IsDefined)
                identity = NewIdentity();
            return DefaultInstance.WithFactory(localName: ImmutableObjectGraph.Optional.For(localName.GetValueOrDefault(DefaultInstance.LocalName)), namespaceName: ImmutableObjectGraph.Optional.For(namespaceName.GetValueOrDefault(DefaultInstance.NamespaceName)), value: ImmutableObjectGraph.Optional.For(value.GetValueOrDefault(DefaultInstance.Value)), identity: identity);
        }

        protected virtual XmlAttribute WithCore(ImmutableObjectGraph.Optional<System.String> localName = default (ImmutableObjectGraph.Optional<System.String>), ImmutableObjectGraph.Optional<System.String> namespaceName = default (ImmutableObjectGraph.Optional<System.String>), ImmutableObjectGraph.Optional<System.String> value = default (ImmutableObjectGraph.Optional<System.String>))
        {
            return this.WithFactory(localName: localName, namespaceName: namespaceName, value: value, identity: ImmutableObjectGraph.Optional.For(this.Identity));
        }

        protected override XmlNode WithCore(ImmutableObjectGraph.Optional<System.String> localName = default (ImmutableObjectGraph.Optional<System.String>))
        {
            return this.WithFactory(localName: localName);
        }

        static partial void CreateDefaultTemplate(ref Template template);
        private static XmlAttribute GetDefaultTemplate()
        {
            var template = new Template();
            CreateDefaultTemplate(ref template);
            return new XmlAttribute(default (uint), template.LocalName, template.NamespaceName, template.Value, skipValidation: true);
        }

        partial void Validate();
        private XmlAttribute WithFactory(ImmutableObjectGraph.Optional<System.String> localName = default (ImmutableObjectGraph.Optional<System.String>), ImmutableObjectGraph.Optional<System.String> namespaceName = default (ImmutableObjectGraph.Optional<System.String>), ImmutableObjectGraph.Optional<System.String> value = default (ImmutableObjectGraph.Optional<System.String>), ImmutableObjectGraph.Optional<uint> identity = default (ImmutableObjectGraph.Optional<uint>))
        {
            if ((identity.IsDefined && identity.Value != this.Identity) || (localName.IsDefined && localName.Value != this.LocalName) || (namespaceName.IsDefined && namespaceName.Value != this.NamespaceName) || (value.IsDefined && value.Value != this.Value))
            {
                return new XmlAttribute(identity: identity.GetValueOrDefault(this.Identity), localName: localName.GetValueOrDefault(this.LocalName), namespaceName: namespaceName.GetValueOrDefault(this.NamespaceName), value: value.GetValueOrDefault(this.Value), skipValidation: false);
            }
            else
            {
                return this;
            }
        }

#pragma warning disable 649 // field initialization is optional in user code

        private struct Template
        {
            internal System.String LocalName;
            internal System.String NamespaceName;
            internal System.String Value;
        }
#pragma warning restore 649
    }
}